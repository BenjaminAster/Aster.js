
<section>
	let $counter: number = 0;
	<button onClick={() => $counter++}> + </button>
	# Counter: {$counter} #
	<button onClick={() => $counter--}> - </button>
	& {
		color: lightSkyBlue;
		margin: 1rem;

		button {
			background-color: black;
			border: 2px solid white {
				radius: .4em;
			};
			color: white;
			font-size: 1.3em;
			width: 1.4em;
			aspect-ratio: 1;

			&:hover {
				background-color: #222;
			}
			&:active {
				background-color: #444;
			}
		}
	}
</section>

<main>
	let $coolNum: number = 30; // Put a "$" in front of your variable to make it reactive
	<>
		let name: string = "world"; // This variable is not reactive (The UI won't change if the variable changes.)
		<>
			for (let i = 0; i < $coolNum; i++) {
				for (let j = 0; j < i; j++) {
					if (true) {
						// console.log(`${i} - ${j}`);
					}
				}
			}
		</>
		<section>
			<article>
				<div>
					<strong>
						<span>
							# test
						</span>
					</strong>
				</div>
			</article>
		</section>
		<section>
			<h1>Hello {name}, the number is {$coolNum} ({$coolNum}).</h1>
			<h2>
				const wikipediaHTML: string = "https://en.wikipedia.org/wiki/HTML";
				const HTLMStartChars: string[] = ["<", "#"];
				# If a line starts with <code>{HTLMStartChars[0]}</code> or <code>{HTLMStartChars[1]}</code>,
				# the line is interpreted as <a href={wikipediaHTML}>HTML</a>.
				& {
					// If a line starts with "&", the line and the lines after it are interpreted as SCSS.
					// This SCSS refers to the current <h2> element.
					color: #ddd;
					code {
						// this refers to all <code> elements inside the current <h2> element.
						padding: .1em .3em;
						border: 2px solid #8886 {
							radius: .4em;
						}
					}
				}
				a {
					// this refers to all <a> elements inside the current <h2> element.
					color: lightSkyBlue;
				}
			</h2>
			<h3>
				const possible: boolean = true;
				# This is <u class="test testtest">{possible ? "also" : "not"} possible</u>.
				& u.test {
					background-color: #8888;
				}
				u.testtest {
					color: lime;
				}
				&::after {
					// This will be interpreted as SCSS.
					content: " You can put as many SCSS rules after each other as you like. (Hover me!)";
				}
				&:hover {
					$coolColor: mediumSeaGreen;
					color: $coolColor;

					&::after {
						content: " But you can't put HTML or TypeScript after your SCSS.";
					}
				}
			</h3>
			<h4>
				const possible: boolean = true;
				<u>And this</u> is
				if (possible) {
					// if statements, for loops etc. work just like in TypeScript.
					// This will be inserted as HTML into the <h4> only if "possible" is true:
					# possible, too!
				} else {
					# not possible.
				}
				# You can switch between HTML and TypeScript
				const howOften: number = Infinity;
				# {howOften === Infinity ? "as often as you like" : `${howOften} times`}.
			</h4>
			<div>
				<p>Please click the button below:</p>
				let $buttonClicked: boolean = false;
				<button onClick={() => {$coolNum++; $buttonClicked = true;}}>
					# Click me!
					& {
						border-color: lime;
					}
				</button>
				<>
					if ($buttonClicked) {
						# #
						<button onClick={() => $coolNum--}>
							# Remove a line
							& {
								border-color: red;
							}
						</button>
					}
				</>
				<ul>
					for (let i = 0; i < $coolNum; i++) {
						<li>
							# {i} is a cool number!
							if (i % 10 === 0) {
								# ({i} a multiple of 10!)
							}
							if (i === 16) {
								# (16 is my favorite number!)
							}
							const flooredHalf: number = Math.floor($coolNum / 2);
							if (i === flooredHalf) {
								# <span> &mdash; </span> {i} is
								if ($coolNum % 2) {
									# (almost)
								}
								# half of {$coolNum}
							}
						</li>
					}
					& {
						background-color: black;
						border: 1px dotted white;
						li {
							color: gold;
						}
					}
				</ul>
				& button {
					border-width: 2px;
					border-style: dashed;
					border-radius: .3em;
					background-color: black;
					padding: .4em .8em;
					&:hover {
						border-color: #ddd;
					}
					&:active {
						background-color: #8886;
					}
				}
			</div>
		</section>
	</>
	& {
		margin: 1rem;
		border: 5px solid #8888 {
			radius: 2rem;
		};
		padding: 1rem;
	}
	&:hover {
		border-color: #888f;
	}
</main>

&:global:

:root {
	color-scheme: dark;
	background-color: #111;
}

body {
	font-family: sans-serif;
	color: white;
	margin: 0;
}

button, select, input, textarea {
	color: white;
	background: transparent;
}

noscript {
	padding: 1em;
	margin: 1em;
	display: block;
	font-weight: bold;
	background-color: black;
	border: 3px solid #333;
	border-radius: 2em;
}

a {
	color: lightSkyBlue;
}