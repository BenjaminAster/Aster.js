[
	{
		"type": "script",
		"code": []
	},
	{
		"type": "markupArray",
		"array": [
			{
				"type": "markup",
				"code": [
					"<section>"
				]
			},
			{
				"type": "block",
				"array": [
					{
						"type": "script",
						"code": [
							"let $counter = _A_createSignalVar((() => { let $counter: number = 0; return $counter; })());"
						]
					},
					{
						"type": "markupArray",
						"array": [
							{
								"type": "markup",
								"code": [
									"<button onClick={() => $counter._++}> + </button>",
									"{\" \"} Counter: {$counter._} {\" \"}",
									"<button onClick={() => $counter._--}> - </button>"
								]
							}
						]
					},
					{
						"type": "style",
						"code": [
							"& {",
							"\tcolor: lightSkyBlue;",
							"\tmargin: 1rem;",
							"\tbutton {",
							"\t\tbackground-color: black;",
							"\t\tborder: 2px solid white {",
							"\t\t\tradius: .4em;",
							"\t\t};",
							"\t\tcolor: white;",
							"\t\tfont-size: 1.3em;",
							"\t\twidth: 1.4em;",
							"\t\taspect-ratio: 1;",
							"\t\t&:hover {",
							"\t\t\tbackground-color: #222;",
							"\t\t}",
							"\t\t&:active {",
							"\t\t\tbackground-color: #444;",
							"\t\t}",
							"\t}",
							"}"
						]
					}
				],
				"style": [
					"& {",
					"\tcolor: lightSkyBlue;",
					"\tmargin: 1rem;",
					"\tbutton {",
					"\t\tbackground-color: black;",
					"\t\tborder: 2px solid white {",
					"\t\t\tradius: .4em;",
					"\t\t};",
					"\t\tcolor: white;",
					"\t\tfont-size: 1.3em;",
					"\t\twidth: 1.4em;",
					"\t\taspect-ratio: 1;",
					"\t\t&:hover {",
					"\t\t\tbackground-color: #222;",
					"\t\t}",
					"\t\t&:active {",
					"\t\t\tbackground-color: #444;",
					"\t\t}",
					"\t}",
					"}"
				]
			},
			{
				"type": "markup",
				"code": [
					"</section>",
					"<main>"
				]
			},
			{
				"type": "block",
				"array": [
					{
						"type": "script",
						"code": [
							"let $coolNum = _A_createSignalVar((() => { let $coolNum: number = 30; return $coolNum; })()); // Put a \"$\" in front of your variable to make it reactive"
						]
					},
					{
						"type": "markupArray",
						"array": [
							{
								"type": "markup",
								"code": [
									"<>"
								]
							},
							{
								"type": "block",
								"array": [
									{
										"type": "script",
										"code": [
											"let name: string = \"world\"; // This variable is not reactive (The UI won't change if the variable changes.)"
										]
									},
									{
										"type": "markupArray",
										"array": [
											{
												"type": "markup",
												"code": [
													"<>"
												]
											},
											{
												"type": "block",
												"array": [
													{
														"type": "script",
														"code": [
															"for (let i = 0; i < $coolNum._; i++) {",
															"\tfor (let j = 0; j < i; j++) {",
															"\t\tif (true) {",
															"\t\t\t// console.log(`${i} - ${j}`);",
															"\t\t}",
															"\t}",
															"}"
														]
													}
												]
											},
											{
												"type": "markup",
												"code": [
													"</>",
													"<section>"
												]
											},
											{
												"type": "block",
												"array": [
													{
														"type": "markupArray",
														"array": [
															{
																"type": "markup",
																"code": [
																	"<article>"
																]
															},
															{
																"type": "block",
																"array": [
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"<div>"
																				]
																			},
																			{
																				"type": "block",
																				"array": [
																					{
																						"type": "markupArray",
																						"array": [
																							{
																								"type": "markup",
																								"code": [
																									"<strong>"
																								]
																							},
																							{
																								"type": "block",
																								"array": [
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"<span>"
																												]
																											},
																											{
																												"type": "block",
																												"array": [
																													{
																														"type": "markupArray",
																														"array": [
																															{
																																"type": "markup",
																																"code": [
																																	"{\" \"} test"
																																]
																															}
																														]
																													}
																												]
																											},
																											{
																												"type": "markup",
																												"code": [
																													"</span>"
																												]
																											}
																										]
																									}
																								]
																							},
																							{
																								"type": "markup",
																								"code": [
																									"</strong>"
																								]
																							}
																						]
																					}
																				]
																			},
																			{
																				"type": "markup",
																				"code": [
																					"</div>"
																				]
																			}
																		]
																	}
																]
															},
															{
																"type": "markup",
																"code": [
																	"</article>"
																]
															}
														]
													}
												]
											},
											{
												"type": "markup",
												"code": [
													"</section>",
													"<section onClick={() => console.log(\"Event handlers work just like in normal TSX!\")}>"
												]
											},
											{
												"type": "block",
												"array": [
													{
														"type": "markupArray",
														"array": [
															{
																"type": "markup",
																"code": [
																	"<h1>Hello {name}, the number is {$coolNum._} ({$coolNum._}).</h1>",
																	"<h2>"
																]
															},
															{
																"type": "block",
																"array": [
																	{
																		"type": "script",
																		"code": [
																			"const wikipediaHTML: string = \"https://en.wikipedia.org/wiki/HTML\";",
																			"const HTLMStartChars: string[] = [\"<\", \"#\"];"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} If a line starts with <code>{HTLMStartChars[0]}</code> or <code>{HTLMStartChars[1]}</code>,",
																					"{\" \"} the line is interpreted as <a href={wikipediaHTML}>HTML</a>."
																				]
																			}
																		]
																	},
																	{
																		"type": "style",
																		"code": [
																			"& {",
																			"\t// If a line starts with \"&\", the line and the lines after it are interpreted as SCSS.",
																			"\t// This SCSS refers to the current <h2> element.",
																			"\tcolor: #ddd;",
																			"\tcode {",
																			"\t\t// this refers to all <code> elements inside the current <h2> element.",
																			"\t\tpadding: .1em .3em;",
																			"\t\tborder: 2px solid #8886 {",
																			"\t\t\tradius: .4em;",
																			"\t\t}",
																			"\t}",
																			"}",
																			"a {",
																			"\t// this refers to all <a> elements inside the current <h2> element.",
																			"\tcolor: lightSkyBlue;",
																			"}"
																		]
																	}
																],
																"style": [
																	"& {",
																	"\t// If a line starts with \"&\", the line and the lines after it are interpreted as SCSS.",
																	"\t// This SCSS refers to the current <h2> element.",
																	"\tcolor: #ddd;",
																	"\tcode {",
																	"\t\t// this refers to all <code> elements inside the current <h2> element.",
																	"\t\tpadding: .1em .3em;",
																	"\t\tborder: 2px solid #8886 {",
																	"\t\t\tradius: .4em;",
																	"\t\t}",
																	"\t}",
																	"}",
																	"a {",
																	"\t// this refers to all <a> elements inside the current <h2> element.",
																	"\tcolor: lightSkyBlue;",
																	"}"
																]
															},
															{
																"type": "markup",
																"code": [
																	"</h2>",
																	"<h3>"
																]
															},
															{
																"type": "block",
																"array": [
																	{
																		"type": "script",
																		"code": [
																			"const possible: boolean = true;"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} This is <u class=\"test testtest\">{possible ? \"also\" : \"not\"} possible</u>."
																				]
																			}
																		]
																	},
																	{
																		"type": "style",
																		"code": [
																			"& u.test {",
																			"\tbackground-color: #8888;",
																			"}",
																			"u.testtest {",
																			"\tcolor: lime;",
																			"}",
																			"&::after {",
																			"\t// This will be interpreted as SCSS.",
																			"\tcontent: \" You can put as many SCSS rules after each other as you like. (Hover me!)\";",
																			"}",
																			"&:hover {",
																			"\t$coolColor: mediumSeaGreen;",
																			"\tcolor: $coolColor;",
																			"\t&::after {",
																			"\t\tcontent: \" But you can't put HTML or TypeScript after your SCSS.\";",
																			"\t}",
																			"}"
																		]
																	}
																],
																"style": [
																	"& u.test {",
																	"\tbackground-color: #8888;",
																	"}",
																	"u.testtest {",
																	"\tcolor: lime;",
																	"}",
																	"&::after {",
																	"\t// This will be interpreted as SCSS.",
																	"\tcontent: \" You can put as many SCSS rules after each other as you like. (Hover me!)\";",
																	"}",
																	"&:hover {",
																	"\t$coolColor: mediumSeaGreen;",
																	"\tcolor: $coolColor;",
																	"\t&::after {",
																	"\t\tcontent: \" But you can't put HTML or TypeScript after your SCSS.\";",
																	"\t}",
																	"}"
																]
															},
															{
																"type": "markup",
																"code": [
																	"</h3>",
																	"<h4>"
																]
															},
															{
																"type": "block",
																"array": [
																	{
																		"type": "script",
																		"code": [
																			"const possible: boolean = true;"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"<u>And this</u> is"
																				]
																			}
																		]
																	},
																	{
																		"type": "script",
																		"code": [
																			"if (possible) {",
																			"\t// if statements, for loops etc. work just like in TypeScript.",
																			"\t// This will be inserted as HTML into the <h4> only if \"possible\" is true:"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} possible, too!"
																				]
																			}
																		]
																	},
																	{
																		"type": "script",
																		"code": [
																			"} else {"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} not possible."
																				]
																			}
																		]
																	},
																	{
																		"type": "script",
																		"code": [
																			"}"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} You can switch between HTML and TypeScript"
																				]
																			}
																		]
																	},
																	{
																		"type": "script",
																		"code": [
																			"const howOften: number = Infinity;"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"{\" \"} {howOften === Infinity ? \"as often as you like\" : `${howOften} times`}."
																				]
																			}
																		]
																	}
																]
															},
															{
																"type": "markup",
																"code": [
																	"</h4>",
																	"<div>"
																]
															},
															{
																"type": "block",
																"array": [
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"<p>Please click the button below:</p>"
																				]
																			}
																		]
																	},
																	{
																		"type": "script",
																		"code": [
																			"let $buttonClicked = _A_createSignalVar((() => { let $buttonClicked: boolean = false; return $buttonClicked; })());"
																		]
																	},
																	{
																		"type": "markupArray",
																		"array": [
																			{
																				"type": "markup",
																				"code": [
																					"<button onClick={() => {$coolNum._++; $buttonClicked._ = true;}}>"
																				]
																			},
																			{
																				"type": "block",
																				"array": [
																					{
																						"type": "markupArray",
																						"array": [
																							{
																								"type": "markup",
																								"code": [
																									"{\" \"} Click me!"
																								]
																							}
																						]
																					},
																					{
																						"type": "style",
																						"code": [
																							"& {",
																							"\tborder-color: lime;",
																							"}"
																						]
																					}
																				],
																				"style": [
																					"& {",
																					"\tborder-color: lime;",
																					"}"
																				]
																			},
																			{
																				"type": "markup",
																				"code": [
																					"</button>",
																					"<>"
																				]
																			},
																			{
																				"type": "block",
																				"array": [
																					{
																						"type": "script",
																						"code": [
																							"console.log($buttonClicked._);",
																							"if ($buttonClicked._) {"
																						]
																					},
																					{
																						"type": "markupArray",
																						"array": [
																							{
																								"type": "markup",
																								"code": [
																									"{\" \"} {\" \"}",
																									"<button onClick={() => $coolNum._--}>"
																								]
																							},
																							{
																								"type": "block",
																								"array": [
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} Remove a line"
																												]
																											}
																										]
																									},
																									{
																										"type": "style",
																										"code": [
																											"& {",
																											"\tborder-color: red;",
																											"}"
																										]
																									}
																								],
																								"style": [
																									"& {",
																									"\tborder-color: red;",
																									"}"
																								]
																							},
																							{
																								"type": "markup",
																								"code": [
																									"</button>"
																								]
																							}
																						]
																					},
																					{
																						"type": "script",
																						"code": [
																							"}"
																						]
																					}
																				]
																			},
																			{
																				"type": "markup",
																				"code": [
																					"</>",
																					"<ul>"
																				]
																			},
																			{
																				"type": "block",
																				"array": [
																					{
																						"type": "script",
																						"code": [
																							"for (let i = 0; i < $coolNum._; i++) {"
																						]
																					},
																					{
																						"type": "markupArray",
																						"array": [
																							{
																								"type": "markup",
																								"code": [
																									"<li>"
																								]
																							},
																							{
																								"type": "block",
																								"array": [
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} {i} is a cool number!"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"if (i % 10 === 0) {"
																										]
																									},
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} ({i} a multiple of 10!)"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"}",
																											"if (i === 16) {"
																										]
																									},
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} (16 is my favorite number!)"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"}",
																											"const flooredHalf: number = Math.floor($coolNum._ / 2);",
																											"if (i === flooredHalf) {"
																										]
																									},
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} <span> &mdash; </span> {i} is"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"if ($coolNum._ % 2) {"
																										]
																									},
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} (almost)"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"}"
																										]
																									},
																									{
																										"type": "markupArray",
																										"array": [
																											{
																												"type": "markup",
																												"code": [
																													"{\" \"} half of {$coolNum._}"
																												]
																											}
																										]
																									},
																									{
																										"type": "script",
																										"code": [
																											"}"
																										]
																									}
																								]
																							},
																							{
																								"type": "markup",
																								"code": [
																									"</li>"
																								]
																							}
																						]
																					},
																					{
																						"type": "script",
																						"code": [
																							"}"
																						]
																					},
																					{
																						"type": "style",
																						"code": [
																							"& {",
																							"\tbackground-color: black;",
																							"\tborder: 1px dotted white;",
																							"\tli {",
																							"\t\tcolor: gold;",
																							"\t}",
																							"}"
																						]
																					}
																				],
																				"style": [
																					"& {",
																					"\tbackground-color: black;",
																					"\tborder: 1px dotted white;",
																					"\tli {",
																					"\t\tcolor: gold;",
																					"\t}",
																					"}"
																				]
																			},
																			{
																				"type": "markup",
																				"code": [
																					"</ul>"
																				]
																			}
																		]
																	},
																	{
																		"type": "style",
																		"code": [
																			"& button {",
																			"\tborder-width: 2px;",
																			"\tborder-style: dashed;",
																			"\tborder-radius: .3em;",
																			"\tbackground-color: black;",
																			"\tpadding: .4em .8em;",
																			"\t&:hover {",
																			"\t\tborder-color: #ddd;",
																			"\t}",
																			"\t&:active {",
																			"\t\tbackground-color: #8886;",
																			"\t}",
																			"}"
																		]
																	}
																],
																"style": [
																	"& button {",
																	"\tborder-width: 2px;",
																	"\tborder-style: dashed;",
																	"\tborder-radius: .3em;",
																	"\tbackground-color: black;",
																	"\tpadding: .4em .8em;",
																	"\t&:hover {",
																	"\t\tborder-color: #ddd;",
																	"\t}",
																	"\t&:active {",
																	"\t\tbackground-color: #8886;",
																	"\t}",
																	"}"
																]
															},
															{
																"type": "markup",
																"code": [
																	"</div>"
																]
															}
														]
													}
												]
											},
											{
												"type": "markup",
												"code": [
													"</section>"
												]
											}
										]
									}
								]
							},
							{
								"type": "markup",
								"code": [
									"</>"
								]
							}
						]
					},
					{
						"type": "style",
						"code": [
							"& {",
							"\tmargin: 1rem;",
							"\tborder: 5px solid #8888 {",
							"\t\tradius: 2rem;",
							"\t};",
							"\tpadding: 1rem;",
							"}",
							"&:hover {",
							"\tborder-color: #888f;",
							"}"
						]
					}
				],
				"style": [
					"& {",
					"\tmargin: 1rem;",
					"\tborder: 5px solid #8888 {",
					"\t\tradius: 2rem;",
					"\t};",
					"\tpadding: 1rem;",
					"}",
					"&:hover {",
					"\tborder-color: #888f;",
					"}"
				]
			},
			{
				"type": "markup",
				"code": [
					"</main>"
				]
			}
		]
	},
	{
		"type": "globalStyle",
		"code": [
			":root {",
			"\tcolor-scheme: dark;",
			"\tbackground-color: #111;",
			"}",
			"body {",
			"\tfont-family: sans-serif;",
			"\tcolor: white;",
			"\tmargin: 0;",
			"}",
			"button, select, input, textarea {",
			"\tcolor: white;",
			"\tbackground: transparent;",
			"}",
			"noscript {",
			"\tpadding: 1em;",
			"\tmargin: 1em;",
			"\tdisplay: block;",
			"\tfont-weight: bold;",
			"\tbackground-color: black;",
			"\tborder: 3px solid #333;",
			"\tborder-radius: 2em;",
			"}",
			"a {",
			"\tcolor: lightSkyBlue;",
			"}"
		]
	}
]